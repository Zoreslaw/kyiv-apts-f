import axios from "axios";
import { logger } from "firebase-functions";
import { defineString } from "firebase-functions/params";
import { AIService } from "./aiService";
import { getTasksForUser, TaskService } from "./taskService";
import { findOrCreateUser } from "./userService";
import { FunctionExecutionService } from "./functionExecutionService";

// Types
interface TelegramMessage {
  chat: { id: number };
  from: { id: number; first_name?: string; last_name?: string; username?: string };
  text?: string;
}

// Constants
const botToken = defineString("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${botToken.value()}`;

const mainMenuKeyboard = {
  keyboard: [
    [{ text: "üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è" }, { text: "‚öôÔ∏è –ú–µ–Ω—é" }],
    [{ text: "‚ùì –î–æ–ø–æ–º–æ–≥–∞" }, { text: "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞" }],
  ],
  resize_keyboard: true,
};

export class TelegramService {
  private aiService: AIService;
  private taskService: TaskService;
  private functionService: FunctionExecutionService;
  private conversationContexts: Map<number, any[]>;

  constructor(openaiApiKey: string) {
    this.aiService = new AIService(openaiApiKey);
    this.taskService = new TaskService();
    this.functionService = new FunctionExecutionService();
    this.conversationContexts = new Map();
  }

  private getConversationContext(chatId: number): any[] {
    if (!this.conversationContexts.has(chatId)) {
      this.conversationContexts.set(chatId, []);
    }
    return this.conversationContexts.get(chatId)!;
  }

  private updateConversationContext(chatId: number, message: any): void {
    const context = this.getConversationContext(chatId);
    context.push(message);
    if (context.length > 3) {
      context.shift();
    }
  }

  private clearConversationContext(chatId: number): void {
    this.conversationContexts.delete(chatId);
  }

  private async sendMessage(chatId: number, text: string, parseMode?: string, replyMarkup?: any): Promise<void> {
    await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: parseMode,
      reply_markup: replyMarkup,
    });
  }

  async handleStart(message: TelegramMessage): Promise<void> {
    const { chat, from } = message;
    const { id: userId, first_name: firstName, last_name: lastName, username } = from;

    logger.info(`New user: ${firstName} (ID=${userId})`);

    // Check if user exists
    let user = await findOrCreateUser({
      id: userId,
    });
    
    if (!user) {
      // Create new user
      user = await findOrCreateUser({
        id: userId,
        first_name: firstName,
        last_name: lastName,
        username: username
      });
    }

    await this.sendMessage(chat.id, "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é –¥–∞–Ω—ñ –∑ –±–∞–∑–æ—é... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.");
    await this.sendMessage(
      chat.id,
      `–í—ñ—Ç–∞—é, ${firstName || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É'}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏.\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:`,
      undefined,
      mainMenuKeyboard
    );
  }

  async handleGetMyTasks(chatId: number): Promise<void> {
    try {
      logger.info(`Loading tasks for user with chatId=${chatId}`);

      const user = await findOrCreateUser({
        id: chatId,
      });
      if (!user) {
        await this.sendMessage(chatId, "–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.");
        return;
      }

      const isAdmin = user.isAdmin();
      const tasks = await getTasksForUser(user.id);

      if (tasks.length === 0) {
        await this.sendMessage(chatId, "–ù–∞ —Ç–µ–±–µ –Ω–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å. :(");
        return;
      }

      // Group tasks by date
      const grouped = this.taskService.groupTasksByDate(tasks);
      const allDates = Object.keys(grouped).sort();

      if (allDates.length === 0) {
        await this.sendMessage(chatId, "–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ.");
        return;
      }

      // Send tasks for each date
      for (const date of allDates) {
        const { checkouts, checkins } = grouped[date];
        if (!checkouts.length && !checkins.length) continue;

        const [y, m, d] = date.split("-");
        const dateString = `${d}.${m}.${y}`;
        let msg = this.taskService.formatTasksMessage(dateString, checkouts, checkins);
        await this.sendMessage(chatId, msg, "Markdown");
      }
    } catch (err) {
      logger.error("Error in handleGetMyTasks:", err);
      await this.sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  }

  async handleMenuCommand(chatId: number): Promise<void> {
    await this.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", undefined, mainMenuKeyboard);
  }

  async handleHelpCommand(chatId: number): Promise<void> {
    const text = `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*

      üìã *–ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å (—Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥, –±–µ–∑ AI)
      ‚öôÔ∏è *–ú–µ–Ω—é* - –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
      ‚ùì *–î–æ–ø–æ–º–æ–≥–∞* - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      ‚ÑπÔ∏è *–ü—Ä–æ –±–æ—Ç–∞* - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞

      –ü—Ä–∏–∫–ª–∞–¥–∏ –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ AI:
      - "–ó–º—ñ–Ω—ñ—Ç—å –≤–∏—ó–∑–¥ 598 –Ω–∞ 11:00"
      - "–í—Å—Ç–∞–Ω–æ–≤–∏ –∑–∞—ó–∑–¥ –Ω–∞ 15:00"
      - "–ü–æ—Å—Ç–∞–≤ —Å—É–º—É 300 –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä–∏ 598"
      - "–ü–æ—Å—Ç–∞–≤ 2 –∫–ª—é—á—ñ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä–∏ 598"`;
          await this.sendMessage(chatId, text, "Markdown");
        }

  async handleAboutCommand(chatId: number): Promise<void> {
    const text = `ü§ñ *–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏*

      –¶–µ–π –±–æ—Ç –ø–æ–∫–∞–∑—É—î –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏–º —Å–ø–æ—Å–æ–±–æ–º —ñ –æ–Ω–æ–≤–ª—é—î —á–∞—Å/—Å—É–º—É/–∫–ª—é—á—ñ —á–µ—Ä–µ–∑ AI.

      –ü–æ–ª—è —É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è—Ö:
      ‚Ä¢ –°—É–º–∞ (sumToCollect)
      ‚Ä¢ –ö–ª—é—á—ñ (keysCount)`;
    await this.sendMessage(chatId, text, "Markdown");
  }

  async handleMessage(message: TelegramMessage): Promise<void> {
    const { chat, from, text } = message;
    if (!text) return;

    const userId = from.id;

    // Handle basic commands
    switch (text) {
      case "/menu":
      case "‚öôÔ∏è –ú–µ–Ω—é":
        await this.handleMenuCommand(chat.id);
        return;

      case "/help":
      case "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        await this.handleHelpCommand(chat.id);
        return;

      case "/about":
      case "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞":
        await this.handleAboutCommand(chat.id);
        return;

      case "/get_my_tasks":
      case "üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è":
        await this.handleGetMyTasks(chat.id);
        return;
    }

    // Load user data
    const user = await findOrCreateUser({
      id: chat.id,
    });
    if (!user) {
      await this.sendMessage(chat.id, "–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.");
      return;
    }

    const isAdmin = user.isAdmin();
    const tasks = await getTasksForUser(user.id);

    // Process with AI
    const result = await this.aiService.processMessage(
      text,
      userId,
      chat.id,
      isAdmin,
      tasks.map(t => t.apartmentId),
      tasks
    );

    if (result.type === "function_call") {
      const functionResult = await this.functionService.executeFunction(result.name, result.arguments);
      const followUp = await this.aiService.processFunctionResult(
        chat.id,
        result.name,
        result.arguments,
        functionResult
      );
      await this.sendMessage(chat.id, followUp.content);
    } else {
      await this.sendMessage(chat.id, result.content);
    }

    // Clear context if command
    if (text.startsWith("/")) {
      this.clearConversationContext(chat.id);
    }
  }

  async handleStartCommand(
    chatId: number,
    userId: number,
    firstName: string,
    lastName: string,
    username: string
  ): Promise<void> {
    try {
      // Create or update user
      await findOrCreateUser({
        id: userId,
        first_name: firstName,
        last_name: lastName,
        username: username
      });

      // Send welcome message
      await this.sendMessage(
        chatId,
        `–í—ñ—Ç–∞—é, ${firstName}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∑ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.`
      );
    } catch (error) {
      logger.error("Error in handleStartCommand:", error);
      await this.sendMessage(
        chatId,
        "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
      );
    }
  }
}